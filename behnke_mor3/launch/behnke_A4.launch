<?xml version ="1.0"?>
<launch>

    <!--
        Das Argument Mode setzt welche Navigation und Pfadplanung verwendet werden soll.
        0 = Die ROS eigene Pfadplanung
        1 = Die eigenimplementierte Breitensuche
    -->

    <arg name="PP_Mode" default="1" />

    <!--
      Im folgenden werden die Nodes zur visualisierung wie in A1 gestartet und rviz mit dem config file f체r A4.
    -->
    <include file="$(find gazebo_ros)launch/empty_world.launch">
      <arg name="world_name" value="$(find behnke_mor3)/maps/mr18b070.world" />
      <arg name="gui" value="false" />
      <arg name="use_sim_time" value="true" />
      <arg name="paused" value="false" />
    </include>

    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_burger_for_autorace.urdf.xacro" /> 
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model turtlebot3_burger -x 0.6 -y 0.6 -z 0 -Y 1.57 -param robot_description" />
    <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch"/>

    <node pkg="map_server" type="map_server" name="map_server" args="$(find behnke_mor3)/maps/behnke_map.yaml" />

    <node pkg="amcl" type="amcl" name="amcl">
      <param name="min_particles"             value="500"/>
      <param name="max_particles"             value="3000"/>
      <param name="kld_err"                   value="0.02"/>
      <param name="update_min_d"              value="0.20"/>
      <param name="update_min_a"              value="0.20"/>
      <param name="resample_interval"         value="1"/>
      <param name="transform_tolerance"       value="0.5"/>
      <param name="recovery_alpha_slow"       value="0.00"/>
      <param name="recovery_alpha_fast"       value="0.00"/>
      <param name="initial_pose_x"            value="0.6"/>
      <param name="initial_pose_y"            value="0.6"/>
      <param name="initial_pose_a"            value="1.57"/>
      <param name="gui_publish_rate"          value="50.0"/>

      <remap from="scan"                      to="/scan"/>
      <param name="laser_max_range"           value="3.5"/>
      <param name="laser_max_beams"           value="180"/>
      <param name="laser_z_hit"               value="0.5"/>
      <param name="laser_z_short"             value="0.05"/>
      <param name="laser_z_max"               value="0.05"/>
      <param name="laser_z_rand"              value="0.5"/>
      <param name="laser_sigma_hit"           value="0.2"/>
      <param name="laser_lambda_short"        value="0.1"/>
      <param name="laser_likelihood_max_dist" value="2.0"/>
      <param name="laser_model_type"          value="likelihood_field"/>

      <param name="odom_model_type"           value="diff"/>
      <param name="odom_alpha1"               value="0.1"/>
      <param name="odom_alpha2"               value="0.1"/>
      <param name="odom_alpha3"               value="0.1"/>
      <param name="odom_alpha4"               value="0.1"/>
      <param name="odom_frame_id"             value="odom"/>
      <param name="base_frame_id"             value="base_footprint"/>
    </node>

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find behnke_mor3)/cfg/behnke_rviz_config_A4.rviz" />

    <!--
      Hier werden Move_Base und die eigenen Nodes gestartet. Das cmd_vel f체r move_base wird je nach Mode ver채ndert um das fahren zu verhindern (Pfad wird trotzdem berechnet).
      Wenn PP_Mode 0 ist wird das cmd_vel topic richtig gesetzt und die eigene Control Node nicht gestartet.
      Wenn PP_mode 1 ist wird das cmd_vel nicht richtig gesetzt daf체r aber die Control node gestartet.
    -->
    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="cmd_vel_topic" default="/cmd_vel2" if="$(arg PP_Mode)" />
    <arg name="cmd_vel_topic" default="/cmd_vel" unless="$(arg PP_Mode)" />
    <arg name="odom_topic" default="odom" />

    <node pkg="move_base" type="move_base" respawn="false" name="move_base">
      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
      <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
      <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
      <remap from="odom" to="$(arg odom_topic)"/>
    </node>

    <node pkg="rostopic" type="rostopic" name="rostopic" args="pub -r 1 /move_base_simple/goal geometry_msgs/PoseStamped '{header: {stamp: now, frame_id: 'map'}, pose: {position: {x: 2.9, y: 3.9, z: 0.0}, orientation: {z: 0.38, w: 0.92}}}'" />
    
    <node pkg="behnke_mor3" name="path_planning_breadth_search_node" type="behnke_path_planning_A3" output="screen" />
    
    <node pkg="behnke_mor3" name="control_node" type="behnke_control_A3" output="screen" if="$(arg PP_Mode)" />

</launch>